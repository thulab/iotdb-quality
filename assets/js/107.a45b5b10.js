(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{477:function(t,r,s){"use strict";s.r(r);var a=s(45),e=Object(a.a)({},(function(){var t=this,r=t.$createElement,s=t._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"timestamprepair-todo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#timestamprepair-todo"}},[t._v("#")]),t._v(" TimestampRepair(TODO)")]),t._v(" "),s("h2",{attrs:{id:"函数简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数简介"}},[t._v("#")]),t._v(" 函数简介")]),t._v(" "),s("p",[t._v("本函数用于时间戳的等间隔修复。将根据提供的参考时间间隔k，采用最小化修复代价修复成等间隔的时间序列；不给定的话，根据全局间隔中位数确定时间间隔。")]),t._v(" "),s("p",[s("strong",[t._v("函数名：")]),t._v(" TIMESTAMPREPAIR")]),t._v(" "),s("p",[s("strong",[t._v("输入序列：")]),t._v(" 仅支持单个输入序列，数据类型无要求")]),t._v(" "),s("p",[s("strong",[t._v("参数：")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("k")]),t._v(": 参考时间间隔，可选。")])]),t._v(" "),s("p",[s("strong",[t._v("输出序列：")]),t._v(" 输出单个序列。")])])}),[],!1,null,null,null);r.default=e.exports}}]);